DROP DATABASE IF EXISTS oes;
CREATE DATABASE IF NOT EXISTS OES;
USE OES;

CREATE TABLE account(
    id_account INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    email VARCHAR(20),
    passwordA VARCHAR(20)
);

INSERT INTO account VALUES(NULL,'Ahmad@gmail.com','233');
INSERT INTO account VALUES(NULL,'Nadia@gmail.com','2343');
INSERT INTO account VALUES(NULL,'Rami@gmail.com','463');
INSERT INTO account VALUES(NULL,'Kaled@gmail.com','492');
INSERT INTO account VALUES(NULL,'Amjad@gmail.com','323');
INSERT INTO account VALUES(NULL,'Bashir@gmail.com','943');
INSERT INTO account VALUES(NULL,'Ali@gmail.com','1746');
INSERT INTO account VALUES(NULL,'JANA@gmail.com','483');
INSERT INTO account VALUES(NULL,'Dani@gmail.com','4347');
INSERT INTO account VALUES(NULL,'Maher@gmail.com','28347');
INSERT INTO account VALUES(NULL,'Fadi@gmail.com','8348');
INSERT INTO account VALUES(NULL,'Youssef@gmail.com','49736');
INSERT INTO account VALUES(NULL,'Kamel@gmail.com','49736');
INSERT INTO account VALUES(NULL,'Hassan@gmail.com','49736');

CREATE TABLE Academic_year(
    id_Academic_year INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    name_Year VARCHAR(20)
);
INSERT INTO Academic_year VALUES (NULL,'first');
INSERT INTO Academic_year VALUES (NULL,'Second');
INSERT INTO Academic_year VALUES (NULL,'Third');
INSERT INTO Academic_year VALUES (NULL,'fourth');
INSERT INTO Academic_year VALUES (NULL,'fifth');

CREATE TABLE student (
     id_student INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
     first_name VARCHAR(20),
     middle_name VARCHAR(30),
     last_name VARCHAR(30),
     BIRTHDAY_date DATE,
     id_year INT,
     id_account INT,
     CONSTRAINT Student_FORIGN_KEY FOREIGN KEY (id_year) REFERENCES Academic_year(id_Academic_year),
     CONSTRAINT Student_FORIGN_KEY2 FOREIGN KEY (id_account) REFERENCES account(id_account)
);
INSERT INTO student VALUES (NULL,'Ahmad','Ali','Omar','2000-2-2',4,1);
INSERT INTO student VALUES (NULL,'Nadia','Fadi','Abdo','2003-4-2',2,2);
INSERT INTO student VALUES (NULL,'Rami','Ali','Omar','2000-5-5',4,3);
INSERT INTO student VALUES (NULL,'Kaled','Dani','Youssef','2002-2-2',2,4);
INSERT INTO student VALUES (NULL,'Amjad','Rami','Bashir','2001-2-7',3,5);
INSERT INTO student VALUES (NULL,'Bashir','Rami','Samer','2003-2-2',1,6);
INSERT INTO student VALUES (NULL,'Ali','Khaled','Omar','2003-3-5',1,7);
INSERT INTO student VALUES (NULL,'JANA','Fadi','Abdo','2003-2-2',1,8);
INSERT INTO student VALUES (NULL,'Dani','Abd','Omar','2002-2-2',3,9);

CREATE TABLE department( 
    id_department INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    name_department VARCHAR(20));
INSERT INTO  department VALUES(NULL,'Basic');
INSERT INTO  department VALUES(NULL,'Software');
INSERT INTO  department VALUES(NULL,'Networks');
INSERT INTO  department VALUES(NULL,'intelligence');


CREATE TABLE lecturer(
    id_lecturer INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    first_name VARCHAR(30),
    last_name VARCHAR(30),
    mobile VARCHAR(10),
    id_account INT,
    CONSTRAINT lecturer_FORIGN_KEY FOREIGN KEY (id_account) REFERENCES account(id_account)
);
INSERT INTO lecturer VALUES(NULL,'Maher','Ahmad','0932105',10);
INSERT INTO lecturer VALUES(NULL,'Fadi','Muhammad','0966886905',11);
INSERT INTO lecturer VALUES(NULL,'Youssef','Dani','0936095105',12);
INSERT INTO lecturer VALUES(NULL,'Kamel','Adel','0936714105',13);
INSERT INTO lecturer VALUES(NULL,'Hassan','Abd','0934614105',14);
  
  
   CREATE TABLE course(
    id_course INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    name_course VARCHAR(30),
    id_department INT,
    id_lecturer INT , 
    CONSTRAINT course_FORIGN_KEY1 FOREIGN KEY (id_department) REFERENCES department(id_department),
     CONSTRAINT course_FORIGN_KEY2 FOREIGN KEY (id_lecturer) REFERENCES lecturer(id_lecturer)
 
);
INSERT INTO course VALUES(NULL,'Math1',1,1);
INSERT INTO course VALUES(NULL,'Math2',1,2);
INSERT INTO course VALUES(NULL,'Networks1',3,4);
INSERT INTO course VALUES(NULL,'intelligence1',4,5);
INSERT INTO course VALUES(NULL,'database1',2,3);
INSERT INTO course VALUES(NULL,'database2',2,2);
INSERT INTO course VALUES(NULL,'algorithms1',2,1);
INSERT INTO course VALUES(NULL,'algorithms2',2,4);

 CREATE TABLE Mark(
    id_mark INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    Amount INT ,
    id_course INT,
    id_student INT,
    CONSTRAINT Mark_FORIGN_KEY FOREIGN KEY (id_course) REFERENCES course(id_course),
    CONSTRAINT Mark_FORIGN_KEY2 FOREIGN KEY (id_student) REFERENCES Student(id_student)
);
INSERT INTO mark VALUES (NULL,89,1,1);
INSERT INTO mark VALUES (NULL,98,2,1);
INSERT INTO mark VALUES (NULL,67,1,3);
INSERT INTO mark VALUES (NULL,68,2,4);
INSERT INTO mark VALUES (NULL,91,2,5);
INSERT INTO mark VALUES (NULL,97,7,6);
INSERT INTO mark VALUES (NULL,79,2,7);
INSERT INTO mark VALUES (NULL,80,2,6);
INSERT INTO mark VALUES (NULL,90,2,2);
INSERT INTO mark VALUES (NULL,95,1,7);
INSERT INTO mark VALUES (NULL,86,6,8);
INSERT INTO mark VALUES (NULL,67,3,9);
INSERT INTO mark VALUES (NULL,77,2,9);
INSERT INTO mark VALUES (NULL,87,3,4);


CREATE TABLE questions(
   id_questions INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    textq  VARCHAR(40),
    answer1 VARCHAR(20),
    answer2 VARCHAR(20),
    answer3 VARCHAR(20),
    answer4 VARCHAR(20),
    correct INT,
    id_course INT,
    CONSTRAINT questions_FORIGN_KEY2 FOREIGN KEY (id_course) REFERENCES course(id_course)
);

INSERT INTO questions VALUES (NULL,'1+1','1','2','3','4',2,1);
INSERT INTO questions VALUES (NULL,'1-1','0','1','3','4',1,1);
INSERT INTO questions VALUES (NULL,'1+3','1','2','3','4',4,1);
INSERT INTO questions VALUES (NULL,'4+1','5','2','3','4',1,1);
INSERT INTO questions VALUES (NULL,'4+2','5','6','3','4',2,1);
INSERT INTO questions VALUES (NULL,'database is stored on','RAM','HARD','ROM','Other',2,5);
INSERT INTO questions VALUES (NULL,'3*3','2','9','10','6',2,2);
INSERT INTO questions VALUES (NULL,'2*3','6','3','8','10',1,2);
INSERT INTO questions VALUES (NULL,'6*3','20','22','25','18',4,2);
INSERT INTO questions VALUES (NULL,'6*6','30','26','36','46',3,2);

CREATE TABLE Exam(
     id_Exam INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
     name VARCHAR(30),
     Exam_date Date,
     hour TIME,
     id_course INT,
     duration INT,
     CONSTRAINT Exam_FORIGN_KEY FOREIGN KEY (id_course) REFERENCES course(id_course)
);